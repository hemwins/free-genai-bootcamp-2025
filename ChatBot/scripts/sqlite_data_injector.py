import sqlite3
import json
import uuid
from pathlib import Path
from typing import Dict, List, Any, Union

class SQLiteDataInjector:
    def __init__(self, db_path: Union[str, Path] = None):
        """Initialize the data injector with database path."""
        if db_path is None:
            # Use default path relative to project root
            db_path = Path(__file__).parent.parent / "database" / "hindi_tutor.db"
        self.db_path = Path(db_path)
        
        # Ensure database directory exists
        self.db_path.parent.mkdir(parents=True, exist_ok=True)

    def inject_data(self, data: Dict[str, List[Any]]) -> None:
        """
        Inject data into words and synonyms tables.
        
        Data format expected:
        {
            "hindi_word": [[synonyms], confidence_score, difficulty_level, category],
            ...
        }
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                print("\nüöÄ Starting data injection...")
                
                for hindi_word, details in data.items():
                    try:
                        synonyms, confidence_score, difficulty_level, category = details
                        
                        # Generate a unique word_id
                        word_id = str(uuid.uuid4())
                        
                        # Insert into words table
                        cursor.execute("""
                            INSERT INTO words (word_id, hindi_word, difficulty_level, category)
                            VALUES (?, ?, ?, ?)
                        """, (word_id, hindi_word, difficulty_level, category))
                        
                        print(f"‚úÖ Added word: {hindi_word}")
                        
                        # Insert synonyms
                        for synonym in synonyms:
                            synonym_id = str(uuid.uuid4())
                            cursor.execute("""
                                INSERT INTO synonyms (synonym_id, word_id, synonym, confidence_score)
                                VALUES (?, ?, ?, ?)
                            """, (synonym_id, word_id, synonym, confidence_score))
                            print(f"  ‚ûï Added synonym: {synonym}")
                            
                    except Exception as e:
                        print(f"‚ùå Error processing word {hindi_word}: {e}")
                        continue
                
                conn.commit()
                print("\n‚ú® Data injection completed successfully!")
                
                # Print summary
                cursor.execute("SELECT COUNT(*) FROM words")
                word_count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM synonyms")
                synonym_count = cursor.fetchone()[0]
                
                print("\nüìä Summary:")
                print(f"Total words added: {word_count}")
                print(f"Total synonyms added: {synonym_count}")
                
        except Exception as e:
            print(f"‚ùå Error during data injection: {e}")
            raise

    def load_json_file(self, file_path: Union[str, Path]) -> Dict[str, List[Any]]:
        """Load data from a JSON file."""
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def verify_data(self) -> None:
        """Verify the injected data."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                print("\nüîç Verifying injected data...")
                
                # Check words table
                cursor.execute("""
                    SELECT w.hindi_word, w.category, w.difficulty_level,
                           GROUP_CONCAT(s.synonym) as synonyms
                    FROM words w
                    LEFT JOIN synonyms s ON w.word_id = s.word_id
                    GROUP BY w.word_id
                    LIMIT 5
                """)
                
                rows = cursor.fetchall()
                
                print("\nSample entries:")
                for row in rows:
                    word, category, difficulty, synonyms = row
                    print(f"\nWord: {word}")
                    print(f"Category: {category}")
                    print(f"Difficulty: {difficulty}")
                    print(f"Synonyms: {synonyms}")
                    
        except Exception as e:
            print(f"‚ùå Error during verification: {e}")
            raise

def main():
    # Sample data
    sample_data = {
        "‡§™‡•ç‡§Ø‡§æ‡§∞": [["‡§™‡•ç‡§∞‡•á‡§Æ", "‡§∏‡•ç‡§®‡•á‡§π", "‡§Ö‡§®‡•Å‡§∞‡§æ‡§ó"], 1, 1, "noun"],
        "‡§™‡§æ‡§®‡•Ä": [["‡§ú‡§≤", "‡§®‡•Ä‡§∞", "‡§µ‡§æ‡§∞‡§ø"], 1, 1, "noun"],
        "‡§Ö‡§ö‡•ç‡§õ‡§æ": [["‡§â‡§§‡•ç‡§§‡§Æ", "‡§∂‡•ç‡§∞‡•á‡§∑‡•ç‡§†", "‡§â‡§Æ‡•ç‡§¶‡§æ"], 1, 1, "adjective"],
        "‡§ò‡§∞": [["‡§Ü‡§µ‡§æ‡§∏", "‡§®‡§ø‡§µ‡§æ‡§∏", "‡§ó‡•É‡§π"], 1, 1, "noun"],
        "‡§≤‡§æ‡§≤": [["‡§∞‡§ï‡•ç‡§§", "‡§∏‡•Å‡§∞‡•ç‡§ñ", "‡§Ö‡§∞‡•Å‡§£"], 1, 1, "adjective"],
        "‡§∏‡§Æ‡§Ø": [["‡§ï‡§æ‡§≤", "‡§µ‡§ï‡•ç‡§§", "‡§µ‡•á‡§≤‡§æ"], 1, 1, "noun"],
        "‡§ñ‡•Å‡§∂": [["‡§™‡•ç‡§∞‡§∏‡§®‡•ç‡§®", "‡§Ü‡§®‡§Ç‡§¶‡§ø‡§§", "‡§π‡§∞‡•ç‡§∑‡§ø‡§§"], 1, 1, "adjective"],
        "‡§Æ‡§ø‡§§‡•ç‡§∞": [["‡§¶‡•ã‡§∏‡•ç‡§§", "‡§∏‡§ñ‡§æ", "‡§∏‡§æ‡§•‡•Ä"], 1, 1, "noun"],
        "‡§§‡•á‡§ú‡§º": [["‡§§‡•Ä‡§µ‡•ç‡§∞", "‡§§‡•Ä‡§ï‡•ç‡§∑‡•ç‡§£", "‡§™‡•ç‡§∞‡§ñ‡§∞"], 1, 1, "adjective"],
        "‡§Ü‡§Å‡§ñ": [["‡§®‡•á‡§§‡•ç‡§∞", "‡§®‡§Ø‡§®", "‡§≤‡•ã‡§ö‡§®"], 1, 1, "noun"],
        "‡§®‡§Ø‡§æ": [["‡§®‡§µ‡•Ä‡§®", "‡§®‡•Ç‡§§‡§®", "‡§Ö‡§≠‡§ø‡§®‡§µ"], 1, 1, "adjective"],
        "‡§´‡•Ç‡§≤": [["‡§™‡•Å‡§∑‡•ç‡§™", "‡§ï‡•Å‡§∏‡•Å‡§Æ", "‡§∏‡•Å‡§Æ‡§®"], 1, 1, "noun"],
        "‡§Æ‡•Ä‡§†‡§æ": [["‡§Æ‡§ß‡•Å‡§∞", "‡§∏‡•ç‡§µ‡§æ‡§¶‡§ø‡§∑‡•ç‡§ü", "‡§∂‡•Ä‡§∞‡•Ä‡§®"], 1, 1, "adjective"],
        "‡§¶‡§ø‡§≤": [["‡§π‡•É‡§¶‡§Ø", "‡§Æ‡§®", "‡§Ö‡§Ç‡§§‡§É‡§ï‡§∞‡§£"], 1, 1, "noun"],
        "‡§ó‡§∞‡§Æ": [["‡§â‡§∑‡•ç‡§£", "‡§§‡§™‡•ç‡§§", "‡§¶‡§æ‡§π‡§ï"], 1, 1, "adjective"],
        "‡§Ü‡§ï‡§æ‡§∂": [["‡§®‡§≠", "‡§ó‡§ó‡§®", "‡§Ö‡§Ç‡§¨‡§∞"], 1, 1, "noun"],
        "‡§ï‡§ø‡§§‡§æ‡§¨": [["‡§™‡•Å‡§∏‡•ç‡§§‡§ï", "‡§ó‡•ç‡§∞‡§Ç‡§•", "‡§™‡•ã‡§•‡•Ä"], 1, 1, "noun"]
    }
    
    # Initialize injector
    injector = SQLiteDataInjector()
    
    # Inject data
    injector.inject_data(sample_data)
    
    # Verify injection
    injector.verify_data()

if __name__ == "__main__":
    main() 